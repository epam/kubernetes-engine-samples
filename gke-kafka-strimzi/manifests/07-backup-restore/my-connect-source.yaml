# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect # (1)
metadata:
  name: my-connect-source-cluster
  annotations:
    strimzi.io/use-connector-resources: "true" # (2)
spec:
  replicas: 3 # (3)
  authentication: # (4)
    type: tls
    certificateAndKey:
      certificate: source.crt
      key: source.key
      secretName: my-source-user
  bootstrapServers: my-source-cluster-kafka-bootstrap:9093 # (5)
  tls: # (6)
    trustedCertificates:
      - secretName: my-source-cluster-cluster-ca-cert
        certificate: ca.crt
  config: # (7)
    group.id: connect-cluster
    offset.storage.topic: my-connect-source-cluster-offsets
    config.storage.topic: my-connect-source-cluster-configs
    status.storage.topic: my-connect-source-cluster-status
    key.converter: org.apache.kafka.connect.json.JsonConverter
    value.converter: org.apache.kafka.connect.json.JsonConverter
    key.converter.schemas.enable: true
    value.converter.schemas.enable: true
    config.storage.replication.factor: 3
    offset.storage.replication.factor: 3
    status.storage.replication.factor: 3
#  build: # (8)
#    output: # (9)
#      type: docker
#      image: my-registry.io/my-org/my-connect-cluster:latest
#      pushSecret: my-registry-credentials
#    plugins: # (10)
#      - name: debezium-postgres-connector
#        artifacts:
#          - type: tgz
#            url: https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/2.1.3.Final/debezium-connector-postgres-2.1.3.Final-plugin.tar.gz
#            sha512sum: c4ddc97846de561755dc0b021a62aba656098829c70eb3ade3b817ce06d852ca12ae50c0281cc791a5a131cb7fc21fb15f4b8ee76c6cae5dd07f9c11cb7c6e79
#      - name: camel-telegram
#        artifacts:
#          - type: tgz
#            url: https://repo.maven.apache.org/maven2/org/apache/camel/kafkaconnector/camel-telegram-kafka-connector/0.11.5/camel-telegram-kafka-connector-0.11.5-package.tar.gz
#            sha512sum: d6d9f45e0d1dbfcc9f6d1c7ca2046168c764389c78bc4b867dab32d24f710bb74ccf2a007d7d7a8af2dfca09d9a52ccbc2831fc715c195a3634cca055185bd91
#  externalConfiguration: # (11)
#    env:
#      - name: AWS_ACCESS_KEY_ID
#        valueFrom:
#          secretKeyRef:
#            name: aws-creds
#            key: awsAccessKey
#      - name: AWS_SECRET_ACCESS_KEY
#        valueFrom:
#          secretKeyRef:
#            name: aws-creds
#            key: awsSecretAccessKey
  resources: # (12)
    requests:
      cpu: "1"
      memory: 2Gi
    limits:
      cpu: "2"
      memory: 2Gi
  logging: # (13)
    type: inline
    loggers:
      log4j.rootLogger: "INFO"
  readinessProbe: # (14)
    initialDelaySeconds: 15
    timeoutSeconds: 5
  livenessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
#  metricsConfig: # (15)
#    type: jmxPrometheusExporter
#    valueFrom:
#      configMapKeyRef:
#        name: my-config-map
#        key: my-key
  jvmOptions: # (16)
    "-Xmx": "1g"
    "-Xms": "1g"
#  image: my-org/my-image:latest # (17)
#  rack:
#    topologyKey: topology.kubernetes.io/zone # (18)
  template: # (19)
    pod:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: app.stateful/component
                operator: In
                values:
                - kafka-broker
            weight: 1
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kafka
                  strimzi.io/cluster: my-source-cluster
                  strimzi.io/component-type: kafka
              topologyKey: kubernetes.io/hostname
            weight: 100
      tolerations:
      - effect: NoSchedule
        key: app.stateful/component
        operator: Equal
        value: kafka-broker
#    pod:
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchExpressions:
#                  - key: application
#                    operator: In
#                    values:
#                      - postgresql
#                      - mongodb
#              topologyKey: "kubernetes.io/hostname"
#    connectContainer: # (20)
#      env:
#        - name: OTEL_SERVICE_NAME
#          value: my-otel-service
#        - name: OTEL_EXPORTER_OTLP_ENDPOINT
#          value: "http://otlp-host:4317"
#  tracing:
#    type: opentelemetry # (21)
